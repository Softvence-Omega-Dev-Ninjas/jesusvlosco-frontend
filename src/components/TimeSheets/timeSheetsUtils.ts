import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import logo from "@/assets/logo.jpg";
import Swal from "sweetalert2";
import L from "leaflet";
import { TimeSheetEntry } from "@/pages/TimeSheets";

// Extend jsPDF to include autoTable
declare module "jspdf" {
  interface jsPDF {
    autoTable: typeof autoTable;
  }
}

// Format date for API
export const processTimeSheetData = {
  formatDateForAPI: (dateString: string) => {
    // const date = new Date(dateString);
    const date = new Date(dateString);
    const now = new Date();
    const combined = new Date(date.getFullYear(), date.getMonth(), date.getDate(), now.getHours(), now.getMinutes(), now.getSeconds());
    const localISOString = new Date(combined.getTime() - combined.getTimezoneOffset() * 60000).toISOString();
    return localISOString;
  },
  filterEntries: (entries: TimeSheetEntry[], searchQuery: string) => {
    return entries.filter((entry) => {
      const userName = entry?.user?.name?.toLowerCase() || "";
      const shiftTitle = entry?.shift?.title?.toLowerCase() || "";
      const shiftLocation = entry?.shift?.location?.toLowerCase() || "";
      const query = searchQuery.toLowerCase();
      return (
        userName.includes(query) ||
        shiftTitle.includes(query) ||
        shiftLocation.includes(query)
      );
    });
  },
  exportToPDF: (
    timeSheetEntries: TimeSheetEntry[],
    searchQuery: string,
    selectedDate: string,
    uniqueUserLocations: any[]
  ) => {
    const doc = new jsPDF();

    // Add company logo with standard dimensions
    try {
      doc.addImage(logo, "JPEG", 20, 15, 40, 20);
    } catch (error) {
      console.log("Logo loading failed:", error);
      // Fallback: create a simple logo placeholder
      doc.setDrawColor(52, 73, 94);
      doc.setLineWidth(0.5);
      doc.rect(20, 15, 40, 20);
      doc.setFontSize(8);
      doc.setFont("helvetica", "bold");
      doc.text("LOGO", 40, 27, { align: "center" });
    }

    // Header Information
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(52, 73, 94);
    doc.text("DAILY CLOCK SHEET", 140, 25, { align: "center" });

    // Add line under header
    doc.setDrawColor(52, 73, 94);
    doc.setLineWidth(0.5);
    doc.line(20, 35, 190, 35);

    // Date and Summary Information
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(0, 0, 0);
    doc.text("Report Information", 20, 45);

    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.3);
    doc.rect(20, 48, 170, 20);

    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text(
      `Report Date: ${new Date(selectedDate).toLocaleDateString()}`,
      25,
      55
    );
    doc.text(`Total Entries: ${timeSheetEntries.length}`, 25, 62);
    doc.text(`Generated: ${new Date().toLocaleDateString()}`, 120, 55);
    doc.text(`Generated by: Admin`, 120, 62);

    // Prepare table data
    const tableData: string[][] = [];

    // Filter data based on search query
    const filteredEntries = timeSheetEntries.filter(
      (entry) =>
        entry.user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (entry.shift?.title || "")
          .toLowerCase()
          .includes(searchQuery.toLowerCase())
    );

    filteredEntries.forEach((entry) => {
      tableData.push([
        entry.user.name,
        entry.shift?.title || "N/A",
        formatTime(entry.clockIn),
        formatTime(entry.clockOut),
        entry.totalHours,
        entry.regularHours,
        entry.overTime,
      ]);
    });

    // Create the table with full width
    autoTable(doc, {
      head: [
        [
          "Employee Name",
          "Shift",
          "Clock In",
          "Clock Out",
          "Total Hours",
          "Regular Hours",
          "Overtime",
        ],
      ],
      body: tableData,
      startY: 85,
      theme: "striped",
      headStyles: {
        fillColor: [52, 73, 94],
        textColor: [255, 255, 255],
        fontStyle: "bold",
        fontSize: 10,
        halign: "center",
      },
      bodyStyles: {
        fontSize: 9,
        cellPadding: 4,
        halign: "center",
      },
      columnStyles: {
        0: { cellWidth: "auto", halign: "left" }, // Employee Name - left align, auto width
        1: { cellWidth: "auto", halign: "left" }, // Shift - left align, auto width
        2: { cellWidth: "auto", halign: "center" }, // Clock In - center align
        3: { cellWidth: "auto", halign: "center" }, // Clock Out - center align
        4: { cellWidth: "auto", halign: "center" }, // Total Hours - center align
        5: { cellWidth: "auto", halign: "center" }, // Regular Hours - center align
        6: { cellWidth: "auto", halign: "center" }, // Overtime - center align
      },
      margin: { left: 15, right: 15 },
      tableWidth: "wrap",
      styles: {
        overflow: "linebreak",
        fontSize: 9,
        cellPadding: 4,
      },
      alternateRowStyles: {
        fillColor: [249, 249, 249],
      },
    });

    // Add summary section
    const finalY =
      (doc as jsPDF & { lastAutoTable?: { finalY: number } }).lastAutoTable
        ?.finalY || 200;

    if (finalY < 250) {
      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.text("Summary", 20, finalY + 20);

      doc.setDrawColor(200, 200, 200);
      doc.setLineWidth(0.3);
      doc.rect(20, finalY + 25, 170, 25);

      doc.setFont("helvetica", "normal");
      doc.setFontSize(10);

      // Calculate totals
      const totalRegularHours = filteredEntries.reduce(
        (sum, entry) => sum + parseFloat(entry.regularHours || "0"),
        0
      );
      const totalOvertimeHours = filteredEntries.reduce(
        (sum, entry) => sum + parseFloat(entry.overTime || "0"),
        0
      );
      const totalAllHours = filteredEntries.reduce(
        (sum, entry) => sum + parseFloat(entry.totalHours || "0"),
        0
      );

      doc.text(
        `Total Employees Present: ${uniqueUserLocations.length}`,
        25,
        finalY + 35
      );
      doc.text(
        `Total Regular Hours: ${totalRegularHours.toFixed(2)}`,
        25,
        finalY + 42
      );
      doc.text(
        `Total Overtime Hours: ${totalOvertimeHours.toFixed(2)}`,
        120,
        finalY + 35
      );
      doc.text(
        `Total All Hours: ${totalAllHours.toFixed(2)}`,
        120,
        finalY + 42
      );
    }

    // Add footer with page numbers
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);

      // Footer line
      doc.setDrawColor(200, 200, 200);
      doc.setLineWidth(0.3);
      doc.line(
        20,
        doc.internal.pageSize.height - 20,
        190,
        doc.internal.pageSize.height - 20
      );

      // Page numbers and info
      doc.setFontSize(8);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(100, 100, 100);
      doc.text(
        `Page ${i} of ${pageCount}`,
        doc.internal.pageSize.width - 30,
        doc.internal.pageSize.height - 10,
        { align: "right" }
      );
      doc.text(
        "CONFIDENTIAL - Daily Clock Sheet",
        20,
        doc.internal.pageSize.height - 10
      );
      doc.text(
        `Generated on ${new Date().toLocaleDateString()}`,
        105,
        doc.internal.pageSize.height - 10,
        { align: "center" }
      );
    }

    // Save the PDF
    const fileName = `Daily_Clock_Sheet_${new Date(selectedDate)
      .toLocaleDateString()
      .replace(/\//g, "-")}.pdf`;
    doc.save(fileName);

    // Show success message
    Swal.fire({
      title: "PDF Generated Successfully!",
      text: `Daily clock sheet for ${new Date(
        selectedDate
      ).toLocaleDateString()} has been downloaded.`,
      icon: "success",
      confirmButtonText: "OK",
      timer: 3000,
    });
  },
};

export const getUniqueUserLocations = (
  filteredTimeSheetData: TimeSheetEntry[]
) => {
  // Map key: `${userId}-${lat}-${lng}` to ensure uniqueness per location
  const uniqueUsers = new Map<string, TimeSheetEntry>();

  filteredTimeSheetData.forEach((entry) => {
    const userId = entry.user.id;
    const lat = entry.clockInLat;
    const lng = entry.clockInLng;

    if (!lat || !lng) return; // skip entries without location

    const key = `${userId}-${lat}-${lng}`;

    // Keep the entry with the latest clockIn for this user-location
    if (
      !uniqueUsers.has(key) ||
      new Date(entry.clockIn) > new Date(uniqueUsers.get(key)!.clockIn)
    ) {
      uniqueUsers.set(key, entry);
    }
  });

  // Map the entries to the desired output format
  return Array.from(uniqueUsers.values()).map((entry) => ({
    id: entry.user.id,
    name: entry.user.name,
    lat: entry.clockInLat,
    lng: entry.clockInLng,
    profileUrl: entry.user.profileUrl,
    shiftTitle: entry.shift?.title || "No Shift Assigned",
    clockIn: entry.clockIn,
    clockOut: entry.clockOut,
    location: entry.location,
  }));
};

export const formatTime = (timeString: string | undefined | null) => {
  if (!timeString || timeString === "undefined" || timeString === "null") return "N/A";
  try {
    const date = new Date(timeString);
    if (isNaN(date.getTime())) return "N/A";
    return date.toLocaleTimeString("en-US", {
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
    });
  } catch {
    return "N/A";
  }
};

export const createUserIcon = (
  profileUrl: string | undefined,
  userName: string
) => {
  const imageUrl =
    profileUrl || "https://randomuser.me/api/portraits/men/77.jpg";
  const initials = userName
    .split(" ")
    .map((n) => n[0])
    .join("")
    .toUpperCase()
    .slice(0, 2);

  return L.divIcon({
    html: `
      <div style="
        position: relative;
        width: 55px;
        height: 60px;
      ">
        <div style="
          position: absolute;
          bottom: 0;
          left: 50%;
          transform: translateX(-50%);
          width: 0;
          height: 0;
          border-left: 15px solid transparent;
          border-right: 15px solid transparent;
          border-top: 25px solid #1b24d1;
          filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
          z-index: 1;
        "></div>
        <div style="
          position: absolute;
          top: -5px;
          left: 50%;
          transform: translateX(-50%);
          width: 50px;
          height: 50px;
          border-radius: 50%;
          border: 3px solid #11bb5a;
          box-shadow: 0 2px 8px rgba(0,0,0,0.3);
          overflow: hidden;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          font-weight: bold;
          font-size: 11px;
          z-index: 2;
        ">
          <img
            src="${imageUrl}"
            alt="${userName}"
            style="
              width: 100%;
              height: 100%;
              object-fit: cover;
              border-radius: 50%;
            "
            onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
          />
          <div style="
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
          ">
            ${initials}
          </div>
        </div>
      </div>
    `,
    className: "custom-user-marker-with-pointer",
    iconSize: [55, 60],
    iconAnchor: [27.5, 60],
    popupAnchor: [0, -60],
  });
};
