// ...inside ExportSection component...

import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import logo from "@/assets/logo.jpg";
import Swal from "sweetalert2";
import { formatTime } from "@/components/TimeSheets/timeSheetsUtils";
import { TimeSheetEntry } from "@/pages/TimeSheets";

export function exportDateRangeToPDF(
  allEntries: TimeSheetEntry[],
  range: { start: string; end: string }
) {
  const doc = new jsPDF();

  // Add logo
  try {
    doc.addImage(logo, "JPEG", 20, 15, 40, 20);
  } catch {}

  doc.setFontSize(18);
  doc.setFont("helvetica", "bold");
  doc.setTextColor(52, 73, 94);
  doc.text("CLOCK SHEET REPORT", 140, 25, { align: "center" });

  doc.setDrawColor(52, 73, 94);
  doc.setLineWidth(0.5);
  doc.line(20, 35, 190, 35);

  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.setTextColor(0, 0, 0);
  doc.text("Report Information", 20, 45);

  doc.setDrawColor(200, 200, 200);
  doc.setLineWidth(0.3);
  doc.rect(20, 48, 170, 20);

  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  doc.text(
    `Report Range: ${range.start} to ${range.end}`,
    25,
    55
  );
  doc.text(`Total Entries: ${allEntries.length}`, 25, 62);
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, 120, 55);
  doc.text(`Generated by: Admin`, 120, 62);

  // Group entries by date
  const grouped: Record<string, TimeSheetEntry[]> = {};
  allEntries.forEach((entry) => {
    const date = entry.clockIn?.split("T")[0] || "Unknown";
    if (!grouped[date]) grouped[date] = [];
    grouped[date].push(entry);
  });

  let y = 85;
  Object.entries(grouped).forEach(([date, entries], idx) => {
    if (idx > 0) doc.addPage();
    doc.setFontSize(13);
    doc.setFont("helvetica", "bold");
    doc.text(`Date: ${date}`, 20, y);

    // Table data
    const tableData = entries.map((entry) => [
      entry.user.name,
      entry.shift?.title || "N/A",
      formatTime(entry.clockIn),
      formatTime(entry.clockOut),
      entry.totalHours,
      entry.regularHours,
      entry.overTime,
    ]);

    autoTable(doc, {
      head: [
        [
          "Employee Name",
          "Shift",
          "Clock In",
          "Clock Out",
          "Total Hours",
          "Regular Hours",
          "Overtime",
        ],
      ],
      body: tableData,
      startY: y + 10,
      theme: "striped",
      headStyles: {
        fillColor: [52, 73, 94],
        textColor: [255, 255, 255],
        fontStyle: "bold",
        fontSize: 10,
        halign: "center",
      },
      bodyStyles: {
        fontSize: 9,
        cellPadding: 4,
        halign: "center",
      },
      margin: { left: 15, right: 15 },
      tableWidth: "wrap",
      styles: {
        overflow: "linebreak",
        fontSize: 9,
        cellPadding: 4,
      },
      alternateRowStyles: {
        fillColor: [249, 249, 249],
      },
    });

    // Optional: Add summary for this date
    const finalY =
      (doc as jsPDF & { lastAutoTable?: { finalY: number } }).lastAutoTable
        ?.finalY || y + 50;

    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text(
      `Total Entries: ${entries.length}`,
      20,
      finalY + 10
    );
  });

  // Footer with page numbers
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.3);
    doc.line(
      20,
      doc.internal.pageSize.height - 20,
      190,
      doc.internal.pageSize.height - 20
    );
    doc.setFontSize(8);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(100, 100, 100);
    doc.text(
      `Page ${i} of ${pageCount}`,
      doc.internal.pageSize.width - 30,
      doc.internal.pageSize.height - 10,
      { align: "right" }
    );
    doc.text(
      "CONFIDENTIAL - Clock Sheet Report",
      20,
      doc.internal.pageSize.height - 10
    );
    doc.text(
      `Generated on ${new Date().toLocaleDateString()}`,
      105,
      doc.internal.pageSize.height - 10,
      { align: "center" }
    );
  }

  // Save the PDF
  const fileName = `Clock_Sheet_${range.start}_to_${range.end}.pdf`;
  doc.save(fileName);

  Swal.fire({
    title: "PDF Generated Successfully!",
    text: `Clock sheet for ${range.start} to ${range.end} has been downloaded.`,
    icon: "success",
    confirmButtonText: "OK",
    timer: 3000,
  });
}